package commands;

import interpreter.Command;
import base.*;
import java.io.*;
import java.util.*;
import java.lang.reflect.*;
import util.*;
import java.util.function.*;

public class Insert extends Command
{
	private Map<Field, Predicate<String>> fieldValidators;
	private Map<Field, String> invalidInputMessages;
	private Set<Field> autogeneratedFields;
	
	public Insert() throws NoSuchFieldException
	{
		this.help = "insert: add new element to the collection";
		
		this.fieldValidators = new HashMap<Field, Predicate<String>>();
		this.invalidInputMessages = new HashMap<Field, String>();
		this.autogeneratedFields = new HashSet<Field>();
		
		      

		
		
		this.fieldValidators.put( LabWork.class.getDeclaredField("name"), 
			(name) -> ((name != null) && (name != "")) );

		this.fieldValidators.put( LabWork.class.getDeclaredField("minimalPoint"), 
			(minimalPoint) -> (Integer.parseInt(minimalPoint) > 0 ) );
		
		this.fieldValidators.put( LabWork.class.getDeclaredField("tunedInWorks"), 
			(tunedInWorks) -> (true) );

		this.fieldValidators.put( LabWork.class.getDeclaredField("difficulty"), 
			(difficulty) -> ((difficulty != null) && (difficulty != "")) );

		this.fieldValidators.put( LabWork.class.getDeclaredField("difficulty"), 
			(discipline) -> ((discipline != null) && (discipline != "")) );



		this.fieldValidators.put( Coordinates.class.getDeclaredField("x"),
			(x) -> (true) );
		
		this.fieldValidators.put( Coordinates.class.getDeclaredField("y"),
			(y) -> (Integer.parseInt(y.toString()) > -161) );
		
		this.fieldValidators.put( Discipline.class.getDeclaredField("name"),
			(name) -> ((name != null) && (name != "")) );
		
		this.fieldValidators.put( Discipline.class.getDeclaredField("labsCount"),
			(labsCount) -> (labsCount != null) );
		
		
		
		this.invalidInputMessages.put(LabWork.class.getDeclaredField("name"), "name must not be empty string or null");
		
		
		
		
		this.invalidInputMessages.put(Coordinates.class.getDeclaredField("x"), "x must be a float number");
		this.invalidInputMessages.put(Coordinates.class.getDeclaredField("y"), "y must be a long integer, y must be greater than -161");
		this.invalidInputMessages.put(LabWork.class.getDeclaredField("minimalPoint"), "minimalPoint must be an integer, minimalPoint must be greater than 0");
		
		
		this.autogeneratedFields.add(LabWork.class.getDeclaredField("id"));
		this.autogeneratedFields.add(LabWork.class.getDeclaredField("creationDate"));
		
	}

	private void handleInput(Object object, Field field)
	{
		if(this.autogeneratedFields.contains(field))
			return;
		
		boolean isInputIncorrect = true;
		String input;
		//System.out.println(object + " +++" + field );
		
		while (isInputIncorrect)
		{
			this.outputStream.println("Enter the " + field.getName() + " of the " 
			+ field.getDeclaringClass().getSimpleName() + ":" );
			if (field.getType().equals(Integer.class) || 
				field.getType().equals(Float.class) || 
				field.getType().equals(Double.class) || 
				field.getType().equals(Byte.class) || 
				field.getType().equals(Short.class) || 
				field.getType().equals(Long.class) || 
				field.getType().equals(Boolean.class) || 
				field.getType().equals(Character.class) ||
				field.getType().equals(String.class) || 
				field.getType().isPrimitive() ||
				field.getType().isEnum() )
			{
				input = this.scanner.next();
				// check field and set value.
				
				Object value = null;
				try
				{
				System.out.println(field.getType().getName());
				value = 
				switch(field.getType().getSimpleName())
				{
					case "Integer", "int" -> Integer.parseInt(input);
					
					case "Float", "float" -> {
	
						
					yield Float.parseFloat(input);
					}
					case "Long", "long" -> Long.parseLong(input);
					
					case "String" -> input;
					
					case "Difficulty" -> Difficulty.valueOf(input);
					
					default -> null;
				};
				
				}
				catch (Exception e)
				{
					this.outputStream.println(this.invalidInputMessages.get(field));
						
					continue;
				}
						
				if ( !this.fieldValidators.get(field).test(input) )
				{
					this.outputStream.println(this.invalidInputMessages.get(field));
									System.out.println(value); 
					continue;
				}					
						
				try
				{
					field.setAccessible(true);
					System.out.println(value + " " + value.getClass());
					System.out.println(object + " " + value.getClass());
					field.set(object, value);
					System.out.println(object);
					return;
				}
				catch (Exception e)
				{
					e.printStackTrace();
				}
			}
			else
			{System.out.println("eslse");
				for (Field f : field.getType().getDeclaredFields())
				{
					try
				{
					f.setAccessible(true);
					field.setAccessible(true);
					
					this.handleInput(field.get(object), f);
				}				catch (Exception e)
				{
					e.printStackTrace();
				}
				
				}
				return;
			//	this.handleInput(field.get(object), );
			}
			
			//if ( !fieldValidator(input) )
				//outputStream.println(onErrorMessage);
		}
	}
	
	
	
	
	@Override
	public void execute()
	{
		LabWork labWork = new LabWork();
		


		try
		{
		for (Field field : LabWork.class.getDeclaredFields())
		{
			this.handleInput(labWork, field);
		}
		
		//this.handleInput(labWork, labWork.getClass().getDeclaredField("coordinates"));
		//this.handleInput(labWork, labWork.getClass().getDeclaredField("name"));
		
		}
		catch (Exception e)
		{
					e.printStackTrace();
		}
		int maxId = 0;
		for (LabWork l : this.baseCollection.getBaseCollection())
			if ( maxId < l.getId() )
				maxId = l.getId();
		
		int id = 1 + maxId;
		
	
		System.out.println("id: " + id);
		
		labWork.setId(id);
		labWork.setCreationDate(java.time.ZonedDateTime.now());
		
		this.baseCollection.getBaseCollection().add(labWork);
		/*this.baseCollection.getBaseCollection().put(new LabWork(
			id,
			name,
			new Coordinates(x, y),
			minimalPoint,
			tunedInWorks,
			difficulty,
			new Discipline(disciplineName, disciplineLabsCount)
		), "");
		*/
		
		
		
		
		
		/*
		String name = null;
		float x = 0.0f;
		long y = 0;
		int minimalPoint = 0;
		long tunedInWorks = 0;
		Difficulty difficulty = null;
		String disciplineName = null;
		int disciplineLabsCount = 0;
		
		boolean isInputIncorrect = true;
		
		while(isInputIncorrect)
		{
			this.outputStream.println("Enter the LabWork name:");
			name = this.scanner.next();
			if (name == "" && name == null)
				this.outputStream.println("LabWork name must not be empty string or null");
			else
				isInputIncorrect = false;
		}
		
		isInputIncorrect = true;
		
		this.outputStream.println("Enter the LabWork Coordinates:");
		
		while(isInputIncorrect)
		{
			this.outputStream.println("Enter x:");
			try
			{
				x = Float.parseFloat(this.scanner.next());
				isInputIncorrect = false;
			}
			catch(Exception exception)
			{
				this.outputStream.println("x must be a float number");
			}
		}
			
		isInputIncorrect = true;
		
		while(isInputIncorrect)
		{
			this.outputStream.println("Enter y:");
			try
			{
				y = Long.parseLong(this.scanner.next());
				isInputIncorrect = false;
				if (y <= -161)
				{
					this.outputStream.println("y must be greater than -161");
					isInputIncorrect = true;
				}
			}
			catch(Exception exception)
			{
				this.outputStream.println("y must be a long integer");
			}
		}
		
		isInputIncorrect = true;
		
		while(isInputIncorrect)
		{
			this.outputStream.println("Enter minimal point:");
			try
			{
				minimalPoint = Integer.parseInt(this.scanner.next());
				isInputIncorrect = false;
				if (minimalPoint <= 0)
				{
					this.outputStream.println("minimal point must be greater than 0");
					isInputIncorrect = true;
				}
			}
			catch(Exception exception)
			{
				this.outputStream.println("minimal point must be an integer");
			}
		}
		
		isInputIncorrect = true;
		
		while(isInputIncorrect)
		{
			this.outputStream.println("Enter tuned in works:");
			try
			{
				tunedInWorks = Integer.parseInt(this.scanner.next());
				isInputIncorrect = false;
			}
			catch(Exception exception)
			{
				this.outputStream.println("tuned in works must be a long integer");
			}
		}
		
		isInputIncorrect = true;
		
		while(isInputIncorrect)
		{
			this.outputStream.println("Enter difficulty:");
			try
			{
				difficulty = Difficulty.valueOf(this.scanner.next());
				isInputIncorrect = false;
			}
			catch(Exception exception)
			{
				this.outputStream.println("difficulty must match one of the next values:\n"
				+ Arrays.toString(Difficulty.values()));
			}
		}
		
		isInputIncorrect = true;
		
		while(isInputIncorrect)
		{
			this.outputStream.println("Enter the discipline name:");
			disciplineName = this.scanner.next();
			if (disciplineName == "" && disciplineName == null)
				this.outputStream.println("discipline name must not be empty string or null");
			else
				isInputIncorrect = false;
		}
		
		isInputIncorrect = true;
		
		while(isInputIncorrect)
		{
			this.outputStream.println("Enter discipline labs count:");
			try
			{
				disciplineLabsCount = Integer.parseInt(this.scanner.next());
				isInputIncorrect = false;
			}
			catch(Exception exception)
			{
				this.outputStream.println("discipline labs count must be an integer");
			}
		}
		
		int maxId = 0;
		
		*/
		
		//for (LabWork l : this.baseMap.keySet())
			
		
		
	}
	
}