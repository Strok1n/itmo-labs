package interpreter.commands.concrete;

import business.LabWork;
import interpreter.commands.Command;
import interpreter.commands.InputValidator;
import util.*;

import java.lang.reflect.Field;
import java.lang.reflect.InvocationTargetException;
import java.util.Scanner;

public class Insert extends Command
{
    private int id;
    private InsertCommandMode insertCommandMode;

    private ObjectCreator objectCreator;

    private InputValidator inputValidator;
    private CommandExecutionMode commandExecutionMode;
    private CommandExecutionStatus commandExecutionStatus;


    public void setObjectCreator(ObjectCreator objectCreator) {
        this.objectCreator = objectCreator;
    }

    public Insert() throws NoSuchFieldException
    {
        this.insertCommandMode = InsertCommandMode.INSERT;
        this.commandExecutionMode = CommandExecutionMode.MANUAL_INPUT;
        this.help = "insert {element}: add new element to the collection";
        this.inputValidator = new InputValidator();
        this.objectCreator = new ObjectCreator(
                LabWork.class,
                new InputValidator(),
                System.out,
                new Scanner(System.in),
                CommandExecutionMode.MANUAL_INPUT
        );

    }

    public void setId(int id) {
        this.id = id;
    }

    public void setCommandExecutionMode(CommandExecutionMode commandExecutionMode) {
        this.commandExecutionMode = commandExecutionMode;
        this.objectCreator.setObjectCreationMode(commandExecutionMode);

    }

    private void handleInput(Object object, Field field) throws IllegalAccessException
    {
       if(this.inputValidator.isFieldAutogenerated(field))
            return;
        String input;
        while (true)
        {

            if (this.commandExecutionMode == CommandExecutionMode.MANUAL_INPUT)
                this.outputStream.println("Enter the " + field.getName() + " of the "
                    + field.getDeclaringClass().getSimpleName() + ":" );
            if (TypeUtilities.isPrimitiveOrWrapperOrString(field.getType()) || field.getType().isEnum() )
            {
                input = this.scanner.nextLine();
                Object value;
                try
                {
                    value = TypeUtilities.StringToSpecifiedFieldType(input, field);
                }
                catch (Exception e)
                {
                    if (this.commandExecutionMode == CommandExecutionMode.FROM_FILE)
                    {
                        System.out.println("######");
                        this.outputStream.println("Wrong argument for command \"insert\", " +
                                "execution cancelled");
                        this.commandExecutionStatus = CommandExecutionStatus.CORRUPTED;
                        return;
                    }
                    this.outputStream.println(this.inputValidator.getInvalidInputMessage(field));
                    continue;
                }
                if ( !this.inputValidator.validateInput(field, input) )
                {

                    if (this.commandExecutionMode == CommandExecutionMode.FROM_FILE)
                    {
                        System.out.println("^^^^^^^^");
                        this.outputStream.println("Wrong argument for command \"insert\", " +
                                "execution cancelled");
                        this.commandExecutionStatus = CommandExecutionStatus.CORRUPTED;
                        return;
                    }

                    this.outputStream.println(this.inputValidator.getInvalidInputMessage(field));
                    continue;
                }

                field.setAccessible(true);
                field.set(object, value);
                field.setAccessible(false);
                return;

            }
            else
            {
                System.out.println("eslse");
                for (Field f : field.getType().getDeclaredFields())
                {
                        field.setAccessible(true);

                        this.handleInput(field.get(object), f);

                        field.setAccessible(false);
                        if (this.commandExecutionStatus == CommandExecutionStatus.CORRUPTED)
                            return;
                }
                return;
            }
        }
    }




    @Override
    public void execute() throws IllegalAccessException, NoSuchFieldException, InvocationTargetException, NoSuchMethodException, InstantiationException {



        //LabWork labWork = new LabWork();

//        for (Field field : LabWork.class.getDeclaredFields())
//        {
//            this.handleInput(labWork, field);
//            if (this.commandExecutionStatus == CommandExecutionStatus.CORRUPTED)
//            {
//                this.commandExecutionStatus = CommandExecutionStatus.NORMAL;
//                return;
//            }
//        }




        LabWork labWork =(LabWork) this.objectCreator.createObject();


        int maxId = 0;
        for (Object l : this.baseCollection.getContainer())
            if ( maxId < ((LabWork) l).getId() )
                maxId = ((LabWork) l).getId();

        int id = 1 + maxId;

        if (this.insertCommandMode == InsertCommandMode.UPDATE)
            id = this.id;

        labWork.setId(id);
        labWork.setCreationDate(java.time.ZonedDateTime.now());

        this.baseCollection.getContainer().add(labWork);

        if (this.insertCommandMode == InsertCommandMode.INSERT)
            this.outputStream.println("LabWork successfully added to the collection");
        if (this.insertCommandMode == InsertCommandMode.UPDATE)
            this.outputStream.println("LabWork with id = " + id +
                    " successfully updated in the collection");

    }

    public void setInsertCommandMode(InsertCommandMode insertCommandMode) {
        this.insertCommandMode = insertCommandMode;
    }
}
