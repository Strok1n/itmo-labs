package util;

import business.Coordinates;
import business.Difficulty;
import business.Discipline;
import business.LabWork;
import util.TypeUtilities;

import java.lang.reflect.Field;
import java.util.*;
import java.util.function.Predicate;

public class InputValidator
{
    private final Map<Field, Predicate<String>> fieldValidators;
    private final Map<Field, String> invalidInputMessages;
    private final Set<Field> autogeneratedFields;


    public InputValidator(Map<Field, Predicate<String>> fieldValidators,
                          Map<Field, String> invalidInputMessages,
                          Set<Field> autogeneratedFields)
    {
        this.fieldValidators = fieldValidators;
        this.invalidInputMessages = invalidInputMessages;
        this.autogeneratedFields = autogeneratedFields;
    }


    public InputValidator() throws NoSuchFieldException
    {
        this.fieldValidators = new HashMap<Field, Predicate<String>>();
        this.invalidInputMessages = new HashMap<Field, String>();
        this.autogeneratedFields = new HashSet<Field>();


        this.fieldValidators.put( LabWork.class.getDeclaredField("name"),
                (name) -> ((name != null) && (!name.equals(""))) );
        this.fieldValidators.put( LabWork.class.getDeclaredField("minimalPoint"),
                (minimalPoint) -> (Integer.parseInt(minimalPoint) > 0 ) );
        this.fieldValidators.put( LabWork.class.getDeclaredField("tunedInWorks"),
                (tunedInWorks) -> (true) );
        this.fieldValidators.put( LabWork.class.getDeclaredField("difficulty"),
                (difficulty) -> ((difficulty != null) && (!difficulty.equals(""))) );

        this.fieldValidators.put( Coordinates.class.getDeclaredField("x"),
                (x) -> (true) );
        this.fieldValidators.put( Coordinates.class.getDeclaredField("y"),
                (y) -> (Integer.parseInt(y) > -161) );

        this.fieldValidators.put( Discipline.class.getDeclaredField("name"),
                (name) -> ((name != null) && (!name.equals(""))) );
        this.fieldValidators.put( Discipline.class.getDeclaredField("labsCount"),
                Objects::nonNull);


        this.invalidInputMessages.put(LabWork.class.getDeclaredField("name"),
                "name must not be empty string or null");
        this.invalidInputMessages.put(LabWork.class.getDeclaredField("minimalPoint"),
                "minimalPoint must be an integer, minimalPoint must be greater than 0");
        this.invalidInputMessages.put(LabWork.class.getDeclaredField("tunedInWorks"),
                "tunedInWorks must be a long integer");
        this.invalidInputMessages.put(LabWork.class.getDeclaredField("difficulty"),
                "difficulty must not be null and must be one of these values: " + Arrays.toString(Difficulty.values()));

        this.invalidInputMessages.put(Coordinates.class.getDeclaredField("x"),
                "x must be a float number");
        this.invalidInputMessages.put(Coordinates.class.getDeclaredField("y"),
                "y must be a long integer, y must be greater than -161");

        this.invalidInputMessages.put(Discipline.class.getDeclaredField("name"),
                "name must not be empty string or null");
        this.invalidInputMessages.put(Discipline.class.getDeclaredField("labsCount"),
                "labsCount must be an integer, labsCount must not be null");

        this.autogeneratedFields.add(LabWork.class.getDeclaredField("id"));
        this.autogeneratedFields.add(LabWork.class.getDeclaredField("creationDate"));

    }

    public boolean isFieldAutogenerated(Field field)
    {
        return this.autogeneratedFields.contains(field);
    }

    public String getInvalidInputMessage(Field field)
    {
        return this.invalidInputMessages.get(field);
    }

    public boolean validateInput(Field field, String input)
    {
        return this.fieldValidators.get(field).test(input);
    }

}
